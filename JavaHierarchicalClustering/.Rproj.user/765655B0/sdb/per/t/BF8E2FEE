{
    "contents" : "#Loads all libraries needed to run script\n#Arguments: \n# memory: string specifying how much memmory allocate to rJava, e.g. \"512m\"\n# for 512 megabytes, \"2g\" for 2 gigabytes.\n\nLoadLibraries<-function(memory=\"2g\"){\n  require(\"dismo\")\n  require(\"maptools\")\n  require(\"sp\")\n  options(java.parameters = paste0(\"-Xmx\",memory))\n  require(\"rJava\")\n  require(\"rgdal\")\n  require(\"rgeos\")\n  require(\"spatstat\")\n  require(\"reshape2\")\n  require(\"SDMTools\")\n  require(\"snowfall\")\n  require(\"raster\")\n  require(\"svDialogs\")\n  require(\"plyr\")\n}\n\nLoadOccs<-function(occ.file){\n  occs <- read.csv(occ.file,as.is=T)\n  \n  with(occs, if(nrow(occs)==0){\n    stop(\"Occurrence file has 0 rows\")\n  })\n  \n  with(occs, if(!exists(\"id\")){\n    stop(\"Variable id is missing from occurrence file\")\n  })\n  \n  with(occs, if(!exists(\"species\")){\n    stop(\"Variable species is missing from occurrence file\")\n  })\n  \n  with(occs, if(!exists(\"lon\")){\n    stop(\"Variable lon is missing from occurrence file\")\n  })\n  \n  with(occs, if(!exists(\"lat\")){\n    stop(\"Variable lat is missing from occurrence file\")\n  })\n\n  lon.errors <- with(occs, which((lon > 180)|(lon < -180)))\n  lat.errors <- with(occs, which((lat > 90)|(lat < -90)))\n  lon.na <- with(occs, which(is.na(lon)))\n  lat.na <- with(occs, which(is.na(lon)))\n  rem.idx <- unique(c(lon.errors,lat.errors,lon.na,lat.na))\n  if(length(rem.idx) > 0){\n    occs<-occs[-rem.idx, ]\n    message(paste0(\"Removed \",length(lon.errors),\" longitude values >180 or < -180\\n\",\n                   \"Removed \",length(lat.errors),\" latitude values >90 or < -90\\n\",\n                   \"Removed \",length(lon.na),\" NA longitude values\\n\",\n                   \"Removed \",length(lat.na),\" NA latitude values\"))\n  }\n  if(nrow(occs)==0){\n    stop(\"Occurrence file has 0 rows\")\n  }\n  return(occs)\n}\n\n\n#Removes duplicates and eliminates records at a particular distance\nCleanOccs<-function(occs,env.vars,dist){\n  occs <- ddply(occs,.(species),IdNeighbors,dist=1000)\n  occs.covs <- extract(env.vars, cbind(occs$lon,occs$lat))\n  return(list(occs=occs, occs.covs=occs.covs))\n}\n\nIdNeighbors<-function(occs,dist,longlat=TRUE){\n  coords <- cbind(occs$lon,occs$lat)\n  dst <- pointDistance(coords,longlat=longlat)\n  diag(dst) <- NA\n  rmv.idx <- which(dst < dist,arr.ind=T)\n  if(nrow(rmv.idx)==0){\n    return(occs)\n  } else {\n    occs <- occs[-rmv.idx[, 1], ]\n    return(occs)\n  }\n}\n\nFilterSpeciesByRecords <- function(occs, min.recs){\n  df <- ddply(occs,\"species\",summarise,N=length(species))\n  sp.list <- df$species[which(df$N >= min.recs)]\n  if(length(sp.list) == 0){\n    stop(paste0(\"None of the species in occurrence file has more than \", min.recs, \" records\"))\n  } else {\n    return(sp.list)\n  }\n}\n\nGenerateBkg <- function(n, env.vars, bkg.type=\"random\", sample.bkg){\n  if(bkg.type == \"random\"){\n    bkg.covs <- sampleRaster(env.vars, n)\n  } \n  if(bkg.type == \"samples\"){\n    sample.coords <- cbind(sample.bkg$lon, sample.bkg$lat)\n    bkg.covs <- extract(env.vars, sample.coords)\n  }\n}\n\nGenerateSpBkg <- function(occs, n, env.vars, bkg.type=\"random\", bkg.aoi, \n                          regions, field, sample.bkg=NULL, buffer=NULL){\n  bkg <- CreateAOI(occs, method=bkg.aoi, env.vars, regions, field, buffer)\n  tmp.stack <- stack(bkg, env.vars)\n  if(bkg.type == \"random\"){\n    bkg.covs <- sampleRaster(tmp.stack, n)[, 2:(nlayers(env.vars)+1)]\n  } \n  if(bkg.type == \"samples\") {\n    if(is.null(sample.bkg)){\n      stop(\"Missing target background samples file\")\n    }\n    with(sample.bkg, if(!exists(\"lon\")){\n      stop(\"Variable lon is missing from occurrence file\")\n    })\n    \n    with(sample.bkg, if(!exists(\"lat\")){\n      stop(\"Variable lat is missing from occurrence file\")\n    })\n    bkg.covs <- na.omit(extract(tmp.stack, cbind(sample.bkg$lon,sample.bkg$lat)))[, 2:(nlayers(env.vars)+1)]\n  }\n  return(list(bkg.aoi=bkg,bkg.covs=as.data.frame(bkg.covs)))\n}\n  \nCreateAOI<-function(occs, method, aoi, regions, field, buffer){\n  in.pts <- SpatialPoints(cbind(occs$lon, occs$lat), proj4string = CRS(projection(aoi)))\n  if(method == \"regions\"){\n    if(missing(regions)){\n      stop(\"Missing regions argument\")\n    }\n    if(missing(field)){\n      stop(\"Missing field argument\")\n    }\n    proj4string(regions) <- CRS(projection(aoi))\n    units <- na.omit(unique(over(in.pts, regions)[, field]))\n    ind <- which(regions@data[,field] %in% units)\n    bkg.shp <- regions[ind,]\n    bkg <- rasterize(bkg.shp, aoi, field=1)\n    return(bkg)\n  } \n  if(method==\"ch\"){\n    ch.shp <- convHull(in.pts)@polygons\n    if(!is.null(buffer)){\n      if(buffer>0){\n        ch.shp <- gBuffer(ch.shp, width=buffer)\n      }\n    } \n    bkg <- rasterize(ch.shp, aoi, field=1)\n    bkg <- bkg * (!is.na(aoi[[1]]))\n    return(bkg)\n  }\n}\n\nsampleRaster<-function(raster.obj,n){\n  if(nlayers(raster.obj)>1){\n    mask <- calc(raster.obj, fun=function(x){\n                                if(sum(is.na(x))==0){\n                                  return(1)\n                                } else {\n                                  return(NA)\n                                }})\n    cells <- Which(!is.na(mask),cells=T)\n  } else {\n    cells <- Which(!is.na(raster.obj),cells=T)\n  }\n  if(length(cells)<n){\n    n <- length(cells)\n    warning(\"n value exceeds the number of cells with data\")\n  }\n  sel.cells <- sample(cells, n)\n  output <- raster.obj[sel.cells]\n  return(output)\n}",
    "created" : 1418664838335.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "584238350",
    "id" : "BF8E2FEE",
    "lastKnownWriteTime" : 1409953570,
    "path" : "D:/Trabajo/201420/Humboldt/RevisionCodigo/parallelMaxent-master/modelingLibraries.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}