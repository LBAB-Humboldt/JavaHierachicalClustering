plot(tmp)
lista.metodos=list("average","single","complete","ward", "median","centroid")
metodos<-dlgList(lista.metodos,multiple=TRUE,title="Seleccione el(los) metodos de agrupamiento que desea probar")$res
## cluster con los diferentes metodos
for (t in 1:length(lista.metodos)){
nombre.clu=paste0("CLUSTER",t)
metodo.usar=metodos[t]
assign(nombre.clu,hclust(DISTAN2,  method =metodo.usar))
}
View(CLUSTER1,height)
View(CLUSTER1$height)
View(CLUSTER1$merge)
library(JavaHierachicalClustering)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
objeto = simpleHierarchicalClustering("E:\\H\\ejemploSmall.csv","simpsons",2)
View(objeto$merge)
cutree(objeto,k=2)
cutree(objeto,k=10)
cutree(objeto,k=1)
cutree(objeto,k=2)
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
write.csv(sipoo,"E:\\sipoo.csv")
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
View(objeto$merge)
cutree(objeto,k=2)
library(JavaHierachicalClustering)
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
View(objeto$merge)
cutree(objeto,k=2)
objeto = agglomerativeSingleLinkClustering("E:\\sipoo.csv","simpsons",2)
View(objeto$merge)
cutree(objeto,k=2)
cutree(objeto,k=1)
library(JavaHierachicalClustering)
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
View(objeto$merge)
library(JavaHierachicalClustering)
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
View(objeto$merge)
cutree(objeto,k=2)
cutree(objeto,k=16)
cutree(objeto,k=8)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
DF <- sipoo
DISTAN2 <- betadiver(DF,"sim") #help=T cuando quiero ver las metricas de distancia
plot(DISTAN2)
distancia <- as.matrix(DISTAN2)
# ###### 7. CLUSTERS ------------------------------------------------------
mascara=readShapePoly("COLOMBIA.shp")
tmp=mascara
tmp$ID=1:nrow(tmp)
plot(tmp)
lista.metodos=list("average","single","complete","ward", "median","centroid")
metodos<-dlgList(lista.metodos,multiple=TRUE,title="Seleccione el(los) metodos de agrupamiento que desea probar")$res
## cluster con los diferentes metodos
for (t in 1:length(lista.metodos)){
nombre.clu=paste0("CLUSTER",t)
metodo.usar=metodos[t]
assign(nombre.clu,hclust(DISTAN2,  method =metodo.usar))
}
View(CLUSTER1$merg)
View(sipoo)
dendrogram1 = as.dendrogram(objeto)
plot(objeto)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
DF <- sipoo
DISTAN2 <- betadiver(DF,"sim") #help=T cuando quiero ver las metricas de distancia
plot(DISTAN2)
distancia <- as.matrix(DISTAN2)
# ###### 7. CLUSTERS ------------------------------------------------------
mascara=readShapePoly("COLOMBIA.shp")
tmp=mascara
tmp$ID=1:nrow(tmp)
plot(tmp)
lista.metodos=list("average","single","complete","ward", "median","centroid")
metodos<-dlgList(lista.metodos,multiple=TRUE,title="Seleccione el(los) metodos de agrupamiento que desea probar")$res
## cluster con los diferentes metodos
for (t in 1:length(lista.metodos)){
nombre.clu=paste0("CLUSTER",t)
metodo.usar=metodos[t]
assign(nombre.clu,hclust(DISTAN2,  method =metodo.usar))
}
cutree(objeto,k=2)
objeto$merge=CLUSTER1$merge
cutree(objeto,k=2)
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
library(JavaHierachicalClustering)
library(JavaHierachicalClustering)
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
cutree(objeto,k=2)
View(objeto$merge)
objeto = simpleHierarchicalClustering("E:\\sipoo2.csv","simpsons",2)
cutree(objeto,k=2)
cutree(objeto,k=1)
cutree(objeto,k=3)
objeto = simpleHierarchicalClustering("E:\\sipoo3.csv","simpsons",2)
cutree(objeto,k=3)
cutree(objeto,k=6)
cutree(objeto,k=5)
cutree(objeto,k=)
cutree(objeto,k=4)
cutree(objeto,k=1)
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
cutree(objeto,k=1)
objeto3 = simpleHierarchicalClustering("E:\\sipoo3.csv","simpsons",2)
objeto3 = simpleHierarchicalClustering("E:\\sipoo3.csv","simpsons",2)
objeto2 = simpleHierarchicalClustering("E:\\sipoo2.csv","simpsons",2)
objeto1 = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
View(objeto1$merge)
View(objeto2$merge)
View(objeto3$merge)
cutree(objeto3,k=5)
cutree(objeto3,k=4)
cutree(objeto3,k=3)
cutree(objeto3,k=2)
cutree(objeto1,k=17)
cutree(objeto1,k=18)
cutree(objeto1,k=17)
cutree(objeto1,k=16)
cutree(objeto1,k=15)
objeto1$merge[3,1]=2
View(objeto1$merge)
cutree(objeto1,k=15)
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
View(objeto$merge)
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
library(JavaHierachicalClustering)
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
cutree(objeto,k=1)
cutree(objeto,k=2)
cutree(objeto,k=18)
cutree(objeto,k=17)
View(objeto$merge)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
View(objeto$merge)
library(JavaHierachicalClustering)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
View(objeto$merge)
library(JavaHierachicalClustering)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
View(objeto$merge)
library(JavaHierachicalClustering)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
objeto = simpleHierarchicalClustering("E:\\sipoo.csv","simpsons",2)
View(objeto$merge)
cutree(objeto,k=1)
cutree(objeto,k=2)
cutree(objeto,k=3)
cutree(objeto,k=4)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
View(sipoo)
rownames(sipoo)
sipoo[0]
View(sipoo[0])
View(sipoo[1])
View(sipoo[2])
help(row)
sipoo[,0]
sipoo[,1]
sipoo[,2]
sipoo[,]
sipoo[,3]
sipoo[,4]
sipoo[,5]
sipoo[,6]
v=sipoo[,6]
v
v=sipoo[,0]
v
View(v)
library(JavaHierachicalClustering)
obj <- .jnew("dataset.DatasetGenerator");
library("rJava", lib.loc="~/R/win-library/3.1")
obj <- .jnew("dataset.DatasetGenerator");
obj <- .jnew("datasets.DatasetGenerator");
rows = rownames(sipoo)
.jcall(obj,"V",rows[1],sipoo[,1])
.jcall(obj,"V","addPoint",rows[1],sipoo[,1])
as.integer(sipoo[0,1])
as.integer(sipoo[1])
as.integer(sipoo[,1])
.jcall(obj,"V","addPoint",rows[1],as.integer(sipoo[,1])
)
.jcall(obj,"V","addPoint",rows[1],as.integer(sipoo[,2]))
.jcall(obj,"I","size")
rows(sipoo)
row(sipoo)
rowcount(sipoo)
nrow(sipoo)
library(JavaHierachicalClustering)
simpleHierarchicalClustering(sipoo)
simpleHierarchicalClustering(sipoo,"simpsons")
simpleHierarchicalClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
library(JavaHierachicalClustering)
simpleHierarchicalClustering(sipoo,"simpsons")
colnames(sipoo)
library(JavaHierachicalClustering)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
simpleHierarchicalClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
simpleHierarchicalClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
library(JavaHierachicalClustering)
data(sipoo)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
simpleHierarchicalClustering(sipoo,"simpsons")
simpleHierarchicalClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
simpleHierarchicalClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
simpleHierarchicalClustering(sipoo,"simpsons")
result = simpleHierarchicalClustering(sipoo,"simpsons")
cutree(result,k=2)
cutree(result,k=1)
View(result$merge)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
objeto = simpleHierarchicalClustering(sipoo,"simpsons")
objeto = simpleHierarchicalClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
objeto = simpleHierarchicalClustering(sipoo,"simpsons")
cutree(objeto,k=2)
cutree(objeto,k=1)
View(objeto$merge)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
objeto = simpleHierarchicalClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
objeto = simpleHierarchicalClustering(sipoo,"simpsons")
cutree(objeto,k=1)
cutree(objeto,k=2)
cutree(objeto,k=3)
cutree(objeto,k=18)
DF <- sipoo
DISTAN2 <- betadiver(DF,"sim") #help=T cuando quiero ver las metricas de distancia
plot(DISTAN2)
distancia <- as.matrix(DISTAN2)
# ###### 7. CLUSTERS ------------------------------------------------------
mascara=readShapePoly("COLOMBIA.shp")
tmp=mascara
tmp$ID=1:nrow(tmp)
plot(tmp)
lista.metodos=list("average","single","complete","ward", "median","centroid")
metodos<-dlgList(lista.metodos,multiple=TRUE,title="Seleccione el(los) metodos de agrupamiento que desea probar")$res
## cluster con los diferentes metodos
for (t in 1:length(lista.metodos)){
nombre.clu=paste0("CLUSTER",t)
metodo.usar=metodos[t]
assign(nombre.clu,hclust(DISTAN2,  method =metodo.usar))
}
View(objeto$merge)
view(CLUSTER1$merge)
View(CLUSTER1$merge)
View(sipoo)
View(DISTAN2)
View(DISTAN2)
help=T
objeto = agglomerativeSingleLinkClustering(sipoo,"simpsons")
View(objeto$merge)
write.csv(sipoo,"E:\\sipoo.csv")
library(JavaHierachicalClustering)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
objeto = agglomerativeSingleLinkClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
objeto = agglomerativeSingleLinkClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
objeto = agglomerativeSingleLinkClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
objeto = agglomerativeSingleLinkClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
objeto = agglomerativeSingleLinkClustering(sipoo,"simpsons")
sipoo[,1]
sipoo[,0]
sipoo[,2]
sipoo[,1]
sipoo[0]
sipoo[1]
sipoo[,1]
sipoo[,19]
sipoo[1,]
sipoo[2,]
v=sipoo[1m]
v=sipoo[1,]
values(sipoo[1,])
v(sipoo[1,])
sipoo[1,]
list(data[1,])
list(sipoo[1,])
list(sipoo[1,])[1]
list(sipoo[1,])[0]
list(sipoo[1,])[3]
sipoo[1,]
sipoo[1,][1]
sipoo[1,][0]
sipoo[1,][3]
sipoo$row.names <- NULL
sipoo[1,]
sipoo$col.names <- NULL
sipoo[1,]
colnames(sipoo)<-NULL
sipoo[1,]
as.integer(sipoo[1,])
objeto = agglomerativeSingleLinkClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
objeto = agglomerativeSingleLinkClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
objeto = agglomerativeSingleLinkClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
objeto = agglomerativeSingleLinkClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
objeto = agglomerativeSingleLinkClustering(sipoo,"simpsons")
library(JavaHierachicalClustering)
setwd("C:\\Users\\ga.sotelo69\\Downloads\\prueba_cluster")
source("beta-functions.R")
pkgs<-c("raster","vegan","maptools","clustsig","PBSmapping", "epitools","RColorBrewer",
"classInt","sp","cluster","ape","phangorn","rgdal","svGUI","svDialogs","snowfall")
lapply(pkgs,loadLibraries) #Load required libraries
data(sipoo)
objeto = agglomerativeSingleLinkClustering(sipoo,"simpsons")
DF <- sipoo
DISTAN2 <- betadiver(DF,"sim") #help=T cuando quiero ver las metricas de distancia
plot(DISTAN2)
distancia <- as.matrix(DISTAN2)
# ###### 7. CLUSTERS ------------------------------------------------------
mascara=readShapePoly("COLOMBIA.shp")
tmp=mascara
tmp$ID=1:nrow(tmp)
plot(tmp)
lista.metodos=list("average","single","complete","ward", "median","centroid")
metodos<-dlgList(lista.metodos,multiple=TRUE,title="Seleccione el(los) metodos de agrupamiento que desea probar")$res
## cluster con los diferentes metodos
for (t in 1:length(lista.metodos)){
nombre.clu=paste0("CLUSTER",t)
metodo.usar=metodos[t]
assign(nombre.clu,hclust(DISTAN2,  method =metodo.usar))
}
View(CLUSTER1$merge)
View(objeto$merge)
View(objeto$height)
View(CLUsTER1$height)
View(CLUSTER1$height)
help("betadiver")
library(JavaHierachicalClustering)
install.packages("vegan")
data(sipoo)
install.packages("vegan")
install.packages("vegan")
jhclust(sipoo)
library(JavaHierachicalClustering)
#Load a package with data to test
install.packages("vegan")
#Load sipoo dataset
data(sipoo)
#Apply simple hierachical clustering over sipoo using simpsons metric
jhclust(sipoo)
library(JavaHierachicalClustering)
#Load a package with data to test
install.packages("vegan")
#Load sipoo dataset
data(sipoo)
#Apply simple hierachical clustering over sipoo using simpsons metric
jhclust(sipoo)
library("vegan", lib.loc="~/R/win-library/3.1")
data(sipoo)
library("vegan")
library(JavaHierachicalClustering)
library("JavaHierachicalClustering", lib.loc="~/R/win-library/3.1")
detach("package:JavaHierachicalClustering", unload=TRUE)
library("JavaHierachicalClustering", lib.loc="~/R/win-library/3.1")
detach("package:JavaHierachicalClustering", unload=TRUE)
library(JavaHierachicalClustering)
library("JavaHierachicalClustering", lib.loc="~/R/win-library/3.1")
detach("package:JavaHierachicalClustering", unload=TRUE)
library("JavaHierachicalClustering", lib.loc="~/R/win-library/3.1")
install.packages(
"https://github.com/LBAB-Humboldt/JavaHierarchicalClustering/raw/master/JavaHierachicalClustering_1.2.1.tar.gz",
repos = NULL, type = "source"
)
library("JavaHierachicalClustering", lib.loc="~/R/win-library/3.1")
install.packages("https://github.com/LBAB-Humboldt/JavaHierarchicalClustering/raw/master/JavaHierachicalClustering_1.2.1.tar.gz", repos = NULL, type = "source")
library("JavaHierachicalClustering")
help(jclust)
help("jclust2)
""
;
")
help("jclust")
help("jhclust")
help("jhclust.csv")
library(JavaHierarchicalClustering)
#Load a package with data to test
library("vegan")
#Load sipoo dataset
data(sipoo)
#Apply simple hierachical clustering over sipoo using simpsons metric
jhclust(sipoo)
.libPaths()
install.packages("~/GitHub/JavaHierarchicalClustering/JavaHierarchicalClustering_1.2.1.zip", repos = NULL)
library("JavaHierarchicalClustering", lib.loc="C:/Program Files/R/R-3.1.2/library")
#Load a package with data to test
library("vegan")
#Load sipoo dataset
data(sipoo)
#Apply simple hierachical clustering over sipoo using simpsons metric
jhclust(sipoo)
class
library(JavaHierarchicalClustering)
class(new list())
new list().class
new list().class()
class(list())
help(jhclust)
library(JavaHierarchicalClustering)
#Load a package with data to test
library("vegan")
#Load sipoo dataset
data(sipoo)
#Apply simple hierachical clustering over sipoo using simpsons metric
jhclust(sipoo)
test <- jhclust(sipoo)
class(test)
plot(test)
